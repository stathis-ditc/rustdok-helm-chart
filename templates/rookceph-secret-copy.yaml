{{- if .Values.server.storage.rookCeph.s3.objectStoreUser.copySecret }}

apiVersion: batch/v1
kind: Job
metadata:
  {{- $metadata := dict "name" "copy-ceph-secret" "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
  namespace: {{ .Values.server.storage.rookCeph.namespace }}
spec:
  template:
    spec:
      serviceAccountName: copy-secret-sa
      containers:
      - name: kubectl
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e  # Exit immediately if a command exits with a non-zero status
          
          echo "Starting secret copy job..."
          echo "Source namespace: {{ .Values.server.storage.rookCeph.namespace }}"
          echo "Source secret: {{ .Values.server.storage.rookCeph.s3.objectStoreUser.secretName }}"
          echo "Target namespace: {{ include "rustdok.namespaceName" . }}"
          
          # Get the secret
          echo "Fetching secret from source namespace..."
          SECRET_DATA=$(kubectl get secret -n {{ .Values.server.storage.rookCeph.namespace }} {{ .Values.server.storage.rookCeph.s3.objectStoreUser.secretName }} -o json) || { echo "Failed to get source secret"; exit 1; }
          
          # Create a clean copy of the secret for the target namespace
          echo "Creating a clean copy of the secret..."
          
          # Extract the key data from the source secret
          ACCESS_KEY=$(echo "$SECRET_DATA" | grep -o '"AccessKey": "[^"]*"' | cut -d'"' -f4)
          SECRET_KEY=$(echo "$SECRET_DATA" | grep -o '"SecretKey": "[^"]*"' | cut -d'"' -f4)
          ENDPOINT=$(echo "$SECRET_DATA" | grep -o '"Endpoint": "[^"]*"' | cut -d'"' -f4)
          
          # Verify target namespace exists
          echo "Verifying target namespace exists..."
          kubectl get namespace {{ include "rustdok.namespaceName" . }} || { echo "Target namespace does not exist"; exit 1; }
          
          # Create a new secret in the target namespace
          echo "Creating new secret in target namespace..."
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ .Values.server.storage.rookCeph.s3.objectStoreUser.secretName }}
            namespace: {{ include "rustdok.namespaceName" . }}
            labels:
              app: {{ .Release.Name }}
              chart: {{ .Chart.Name }}-{{ .Chart.Version }}
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
          type: kubernetes.io/rook
          data:
            AccessKey: $ACCESS_KEY
            SecretKey: $SECRET_KEY
            Endpoint: $ENDPOINT
          EOF
                    
          echo "Secret copied successfully"
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  {{- $metadata := dict "name" "copy-secret-sa" "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
  namespace: {{ .Values.server.storage.rookCeph.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  {{- $metadata := dict "name" "secret-reader" "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
  namespace: {{ .Values.server.storage.rookCeph.namespace }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["{{ .Values.server.storage.rookCeph.s3.objectStoreUser.secretName }}"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  {{- $metadata := dict "name" "read-secrets" "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
  namespace: {{ .Values.server.storage.rookCeph.namespace }}
subjects:
- kind: ServiceAccount
  name: copy-secret-sa
  namespace: {{ .Values.server.storage.rookCeph.namespace }}
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
# Role to check if namespace exists
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  {{- $metadata := dict "name" (printf "%s-namespace-reader" .Release.Name) "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get"]
---
# Binding for namespace check
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  {{- $metadata := dict "name" (printf "%s-namespace-reader-binding" .Release.Name) "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
subjects:
- kind: ServiceAccount
  name: copy-secret-sa
  namespace: {{ .Values.server.storage.rookCeph.namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-namespace-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  {{- $metadata := dict "name" "secret-writer" "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
  namespace: {{ include "rustdok.namespaceName" . }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  {{- $metadata := dict "name" "write-secrets" "Chart" .Chart "Release" .Release }}
  {{- include "rustdok.commonMetadata" $metadata | nindent 2 }}
  namespace: {{ include "rustdok.namespaceName" . }}
subjects:
- kind: ServiceAccount
  name: copy-secret-sa
  namespace: {{ .Values.server.storage.rookCeph.namespace }}
roleRef:
  kind: Role
  name: secret-writer
  apiGroup: rbac.authorization.k8s.io
{{- end }}